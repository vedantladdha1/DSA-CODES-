#include <stdio.h>
#include <stdlib.h>

void Insert(int A [],int n){
   int i=n;
   int temp;
   temp=A[i];
   
   while(i>1 && A[i/2]<temp){
       A[i]=A[i/2];
       i=i/2;
   }
   A[i]=temp;
}

int delete(int A[],int n){
    int x,i,j,val,temp;
    
    val=A[1];
    x=A[n];
    A[1]=A[n];
    A[n]=val;
    
    i=1;
    
    j=2*i;
    
    while(j<=n-1){
        if(j<n-1 && A[j+1]>A[j])
            j=j+1;
        
        if(A[i]<A[j]){
            temp=A[i];
            A[i]=A[j];
            A[j]=temp;
            i=j;
            j=2*j;
            
        }
        else
        break;
    }
    return val;
}

void sort(int A[],int n){
    sort(A,n);
    
}

int isHeap(int A[], int i, int n)
{
    // If (2 * i) + 1 >= n, then leaf node, so return true
    if (i >= (n - 1) / 2)
        return 1;
  
    // If an internal node and is 
    // greater than its children,
    // and same is recursively 
    // true for the children
    if (A[i] >= A[2 * i + 1] &&  A[i] >= A[2 * i + 2] && isHeap(A, 2 * i + 1, n) && isHeap(A, 2 * i + 2, n))
        return 1;
  
    return 0;
}
void swap(int A[],int i , int j ){
  int temp = A[i];
  A[i]=A[j];
  A[j]=temp;
}
void Heapifying(int A[],int n){
    for(int i = (n/2)-1; i>=0;i--){
        
        int j = 2*i+1;
        while(j<n-1){
            if(A[j]<A[j+1])
            j=j+1;
            
            if(A[i]<A[j]){
                swap(A,i,j);
                i=j;
                j=2*i+1;
                
            }
            else
            break;
            }
    }
    
    
}
int main() {
    int choice, n;
    int *A = NULL;

    while (1) {
        printf("\n");
        printf("1. Create Heap\n");
        printf("2. Insert\n");
        printf("3. Delete\n");
        printf("4. Sort\n");
        printf("5. Check if Heap\n");
        printf("0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 0:
                free(A);
                exit(0);
            case 1:
                printf("Enter the size of the array: ");
                scanf("%d", &n);
                A = (int *)malloc(n * sizeof(int));
                printf("Enter the elements: ");
                for (int i = 0; i < n; i++) {
                    scanf("%d", &A[i]);
                }
                Heapifying(A, n);
                break;
            case 2:
                if (A == NULL) {
                    printf("Heap is not created!\n");
                } else {
                    int key;
                    printf("Enter the element to insert: ");
                    scanf("%d", &key);
                    Insert(A, n);
                    A[n++] = key;
                    Heapifying(A, n);
                }
                break;
            case 3:
                if (A == NULL) {
                    printf("Heap is not created!\n");
                } else if (n == 0) {
                    printf("Heap is empty!\n");
                } else {
                    int val = delete(A, n--);
                    printf("Deleted element: %d\n", val);
                    Heapifying(A, n);
                }
                break;
            case 4:
                if (A == NULL) {
                    printf("Heap is not created!\n");
                } else {
                    sort(A, n);
                    printf("Sorted array: ");
                    for (int i = 0; i < n; i++) {
                        printf("%d ", A[i]);
                    }
                    printf("\n");
                }
                break;
            case 5:
                if (A == NULL) {
                    printf("Heap is not created!\n");
                } else {
                    int check = isHeap(A, 0, n);
                    if (check) {
                        printf("The array is a heap.\n");
                    } else {
                        printf("The array is not a heap.\n");
                    }
                }
                break;
            default:
                printf("Invalid choice!\n");
        }
    }

    return 0;
}
