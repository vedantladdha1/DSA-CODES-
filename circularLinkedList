#include <stdio.h>
#include <stdlib.h>

struct Node{
    struct Node*next;
    int data;
}*Head;


void create(int A[],int n)
{
    struct Node*t,*last;
    
    Head = (struct Node*)malloc(sizeof(struct Node));
    Head->data = A[0];
    Head->next = Head;
    last = Head;
    
    for(int i = 1 ; i<n ; i++){
        t=(struct Node*)malloc(sizeof(struct Node));
        t->data = A[i];
        t->next = last->next ;
        last->next = t;
        last = t;
    }
    
}

void display(struct Node*p){
    do{
        printf("%d ",p->data);
        p=p->next;
    }while(p->next!=Head);
}

int length(struct Node*p){
    int len = 0 ;
    do{
        len ++;
        p=p->next;
    }while(p->next!=Head);
    return len;
}

int insert (struct Node*p , int index , int x ){
    
    struct Node*t;
    if(index<0 || index>length(Head))
    return -1 ;
    
    if(index=0){
        t=(struct Node*)malloc(sizeof(struct Node));
        t->data = x;
        if(Head ==NULL){
            Head = t;
            Head ->next = Head;
        }
        
        else{
            while(p->next!=Head)
            p=p->next;
            
            p->next = t ;
            t->next = Head ;
            Head = t ;
        }
    }
    
    else{
        
        for(int i = 0 ; i<index-1 ; i++){
            p=p->next;
            
        }
        t=(struct Node*)malloc(sizeof(struct Node));
        t->data = x;
        t->next = p->next ;
        p->next = t ; 
    }
}

int delete(struct Node*p , int index ){
    int x=-1;
    struct Node*q;
    
     if (index < 0 || index > length (Head))
    return -1;
    
   
if (index == 0)
    {

      while (p->next != Head)
	p = p->next;
      x = Head->data;
      if (Head = p)
	{
	  free (Head);
	  Head = NULL;
	}
      else
	{
	  p->next = Head->next;
	  free (Head);
	  Head = p->next;

	}

    }
  else
    {

      for (int i = 0; i < index - 1; i++)
	p = p->next;
      q = p->next;
      p->next = q->next;
      x = q->data;
      free (q);

    }
  return x;

}
int main() {
    int choice;
    int n, index, x;

    while (1) {
        printf("\n");
        printf("1. Create Circular Linked List\n");
        printf("2. Display Circular Linked List\n");
        printf("3. Insert Node\n");
        printf("4. Delete Node\n");
        printf("0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 0:
                exit(0);
            case 1:
                printf("Enter the number of elements: ");
                scanf("%d", &n);
                int* A = (int*)malloc(n * sizeof(int));
                printf("Enter the elements: ");
                for (int i = 0; i < n; i++) {
                    scanf("%d", &A[i]);
                }
                create(A, n);
                printf("Circular Linked List created successfully!\n");
                free(A);
                break;
            case 2:
                printf("Displaying Circular Linked List:\n");
                display(Head);
                break;
            case 3:
                printf("Enter the index to insert node: ");
                scanf("%d", &index);
                printf("Enter the value to insert: ");
                scanf("%d", &x);
                insert(Head, index, x);
                printf("Node inserted successfully!\n");
                break;
            case 4:
                printf("Enter the index to delete node: ");
                scanf("%d", &index);
                int deletedValue = delete(Head, index);
                if (deletedValue != -1)
                    printf("Node at index %d deleted. Deleted value: %d\n", index, deletedValue);
                else
                    printf("Invalid index!\n");
                break;
            default:
                printf("Invalid choice!\n");
        }
    }

    return 0;
}
