#include <stdio.h>
#include <stdlib.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int isMaxHeap(int arr[], int n) {
    for (int i = 0; i <= (n - 2) / 2; i++) {
        // If left child is greater, return false
        if (arr[2 * i + 1] > arr[i])
            return 0;

        // If right child is greater, return false
        if (2 * i + 2 < n && arr[2 * i + 2] > arr[i])
            return 0;
    }
    return 1;
}

void maxHeapify(int arr[], int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    // If left child is larger than root
    if (left < n && arr[left] > arr[largest])
        largest = left;

    // If right child is larger than largest so far
    if (right < n && arr[right] > arr[largest])
        largest = right;

    // If largest is not root
    if (largest != i) {
        swap(&arr[i], &arr[largest]);

        // Recursively heapify the affected sub-tree
        maxHeapify(arr, n, largest);
    }
}

void buildMaxHeap(int arr[], int n) {
    for (int i = n / 2 - 1; i >= 0; i--)
        maxHeapify(arr, n, i);
}

int findKthLargest(int arr[], int n, int k) {
    buildMaxHeap(arr, n);

    for (int i = 0; i < k - 1; i++) {
        swap(&arr[0], &arr[n - 1]);
        n--;
        maxHeapify(arr, n, 0);
    }

    return arr[0];
}

void deleteMax(int arr[], int *n) {
    if (*n <= 0) {
        printf("Heap is empty.\n");
        return;
    }

    arr[0] = arr[*n - 1];
    (*n)--;
    maxHeapify(arr, *n, 0);
    printf("Largest element deleted.\n");
}

void printArray(int arr[], int n) {
    printf("Array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int choice, n, k;
    int *arr = NULL;

    while (1) {
        printf("\n");
        printf("1. Create Array\n");
        printf("2. Check if Max Heap\n");
        printf("3. Convert Array to Max Heap\n");
        printf("4. Find Kth Largest Element\n");
        printf("5. Delete Largest Element\n");
        printf("0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 0:
                free(arr);
                exit(0);
            case 1:
                printf("Enter the size of the array: ");
                scanf("%d", &n);
                arr = (int *) malloc(n * sizeof(int));
                printf("Enter the elements: ");
                for (int i = 0; i < n; i++) {
                    scanf("%d", &arr[i]);
                }
                printArray(arr, n);
                break;
            case 2:
                if (arr == NULL) {
                    printf("Array is not created!\n");
                } else {
                    int check = isMaxHeap(arr, n);
                    if (check) {
                        printf("The array is a max heap.\n");
                    } else {
                        printf("The array is not a max heap.\n");
                    }
                }
                break;
            case 3:
                if (arr == NULL) {
                    printf("Array is not created!\n");
                } else {
                    buildMaxHeap(arr, n);
                    printf("Array converted to max heap.\n");
                    printArray(arr, n);
                }
                break;
            case 4:
                if (arr == NULL) {
                    printf("Array is not created!\n");
                } else {
                    printf("Enter the value of k: ");
                    scanf("%d", &k);
                    if (k <= 0 || k > n) {
                        printf("Invalid value of k!\n");
                    } else {
                        int kthLargest = findKthLargest(arr, n, k);
                        printf("The %dth largest element in the array is: %d\n", k, kthLargest);
                    }
                }
                break;
            case 5:
                if (arr == NULL) {
                    printf("Array is not created!\n");
                } else {
                    deleteMax(arr, &n);
                    printArray(arr, n);
                }
                break;
            default:
                printf("Invalid choice!\n");
        }
    }

    return 0;
}
