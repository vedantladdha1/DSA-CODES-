#include <stdio.h>
#include<stdlib.h>
#define max 100 
typedef struct {
    int top;
    char items[max];
}Stack;

void push(Stack *s , char c){
    if(s->top == max-1 ){
        printf("Stack is overflow\n");
    }
    s->items[++(s->top)]=c;
}
char pop(Stack *s){
    if(s->top==-1){
        printf("STACK IS UNDERFLOW\n");
    }
    return s->items[(s->top)--];
}
int is_opening(char c ){
    return (c=='(' || c=='{' || c=='[');
}

int is_closing(char c ){
    return (c==')' || c=='}' || c==']');
}

int is_matching(char opening , char closing){
    return 
    ( 
    (opening== '(' && closing ==')') ||
    (opening== '{' && closing =='}') ||
    (opening== '[' && closing ==']')
    );
}

int isBALANCED(char *exp){
  
    Stack s;
    s.top=-1;
    
    char c; 
    for(int i = 0 ; exp[i]!='\0' ; i++){
        c=exp[i];
        if(is_opening(c)){
            push(&s,c);
        }
        else if (is_closing(c)){
            if(s.top==-1 ||  !is_matching(pop(&s),c))
            return 0;
        }
    }
    
    
    return (s.top==-1);
  
}

int main() {
    int choice;
    char expression[100];

    while (1) {
        printf("\n");
        printf("1. Check balanced parentheses\n");
        printf("0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 0:
                exit(0);
            case 1:
                printf("Enter an expression: ");
                scanf("%s", expression);

                if (isBALANCED(expression)) {
                    printf("The expression is balanced.\n");
                } else {
                    printf("The expression is not balanced.\n");
                }
                break;
            default:
                printf("Invalid choice!\n");
        }
    }

    return 0;
}
