#include <stdio.h>
#include <stdlib.h>

struct Node{
    int key;
    struct Node*lchild;
    
   
    struct Node*rchild;
     int height;
};


int height(struct Node*p){
    if(p==NULL){
        return 0;
    }
    else return p->height;
}

int max(int a , int b){
    if (a>b)
    return a;
    else return b;
}

struct Node*newNode(int key){
   struct Node *node
    =(struct Node*)malloc(sizeof(struct Node));
    node->key = key ;
    node->lchild=node->rchild=NULL;
    node->height=1;
    return (node);
}

struct Node *RightRotate(struct Node *y)
{
    struct Node *x = y->lchild;
    struct Node *T2 = x->rchild;
 
    // Perform rotation
    x->rchild = y;
    y->lchild = T2;
 
    // Update heights
    y->height = max(height(y->lchild),
                    height(y->rchild)) + 1;
    x->height = max(height(x->lchild),
                    height(x->rchild)) + 1;
 
    // Return new root
    return x;
}

struct Node *LeftRotate(struct Node *x)
{
    struct Node *y = x->rchild;
    struct Node *T2 = y->lchild;
 
    // Perform rotation
    y->lchild = x;
    x->rchild = T2;
 
    //  Update heights
    x->height = max(height(x->lchild),  
                    height(x->rchild)) + 1;
    y->height = max(height(y->lchild),
                    height(y->rchild)) + 1;
 
    // Return new root
    return y;
}
int getBalance(struct Node*p){
    if(p==NULL){
        return 0;
    }
    return height(p->lchild)-height(p->rchild);
}

struct Node*insert(struct Node* root , int key){
    if(root==NULL){
         return newNode(key);
    }
        if(key<root->key){
            root->lchild = insert(root->lchild,key);
        }
        else if(key>root->key){
            root->rchild = insert(root->rchild,key);
        }
        else
        return root;
       
       root->height = 1+ max(height(root->lchild),height(root->rchild));
       
       int balance = getBalance(root);
       
       if(balance > 1 && key< root->lchild->key)
       return RightRotate(root);
       
        if (balance>1 && key>root->lchild->key){
       root->lchild=LeftRotate(root->lchild);
       return RightRotate(root);
        }
       
         if (balance<-1 && key>root->rchild->key)
      
       return LeftRotate(root);
       
        if(balance<-1 && key<root->rchild->key){
            root->rchild=RightRotate(root->rchild);
            return LeftRotate(root);
       }
       
       return root;
       
}

struct Node*InSucc(struct Node*p){
    while(p&&p->rchild!=NULL){
        p=p->lchild;
        return p;
    }
}
struct Node*delete(struct Node*root , int key){
if(root==NULL){
    return NULL;
}
if(key<root->key){
    root->lchild=delete(root->lchild,key);
}
else if (key>root->key){
    root->rchild=delete(root->rchild, key);
}

else{
    
    if(root->lchild==NULL){
        struct Node*temp;
        temp = root->rchild;
        free(root);
        return temp;
    }
    else if (root->rchild==NULL){
        struct Node*temp;
        temp=root->lchild;
        free(root);
        return temp;
    }
    struct Node*temp = InSucc(root->rchild);
    root->key=temp->key;
    root->rchild=delete(root->rchild,key);
}
return root;
}
void preorder(struct Node*p){
    if(p!=NULL){
        printf("%d ",p->key);
        preorder(p->lchild);
        preorder(p->rchild);
    }
}
void Inorder(struct Node*p){
    if(p){
        Inorder(p->lchild);
        printf("%d ",p->key);
        Inorder(p->rchild);
    }
}

void Postorder(struct Node*p){
    if(p){
        Postorder(p->lchild);
        Postorder(p->rchild);
        printf("%d ",p->key);
    }
}
int main() {
    struct Node *root = NULL;
    int choice, key;

    while (1) {
        printf("\n");
        printf("1. Insert\n");
        printf("2. Delete\n");
        printf("3. Preorder Traversal\n");
        printf("4. Inorder Traversal\n");
        printf("5. Postorder Traversal\n");
        printf("0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 0:
                exit(0);
            case 1:
                printf("Enter the key to insert: ");
                scanf("%d", &key);
                root = insert(root, key);
                break;
            case 2:
                printf("Enter the key to delete: ");
                scanf("%d", &key);
                root = delete(root, key);
                break;
            case 3:
                printf("Preorder Traversal: ");
                preorder(root);
                printf("\n");
                break;
            case 4:
                printf("Inorder Traversal: ");
                Inorder(root);
                printf("\n");
                break;
            case 5:
                printf("Postorder Traversal: ");
                Postorder(root);
                printf("\n");
                break;
            default:
                printf("Invalid choice!\n");
        }
    }

    return 0;
}
